{"ast":null,"code":"import axios from 'axios';\nimport { jwtDecode } from 'jwt-decode';\nconst axiosInstance = axios.create({\n  baseURL: 'http://localhost:5000',\n  timeout: 10000\n});\nlet isRedirecting = false;\nlet hasShownWarning = false;\n\n// Function to check remaining time in minutes\nconst getTokenRemainingTime = () => {\n  const token = localStorage.getItem('authToken');\n  if (!token) return 0;\n  try {\n    const decoded = jwtDecode(token);\n    const currentTime = Date.now() / 1000;\n    const remainingSeconds = decoded.exp - currentTime;\n    return Math.floor(remainingSeconds / 60); // Convert to minutes\n  } catch {\n    return 0;\n  }\n};\n\n// Function to check if token is expired\nconst isTokenExpired = () => {\n  return getTokenRemainingTime() <= 0;\n};\n\n// Function to handle token expiration warnings\nconst checkTokenWarning = () => {\n  const remainingMinutes = getTokenRemainingTime();\n\n  // Show warning at 5 minutes if not already shown\n  if (remainingMinutes <= 5 && remainingMinutes > 0 && !hasShownWarning) {\n    hasShownWarning = true;\n    const minutes = Math.ceil(remainingMinutes);\n    alert(`⚠️ Your session will expire in ${minutes} minute${minutes > 1 ? 's' : ''}. Please save your work and login again to continue.`);\n  }\n\n  // Reset warning flag when new token is present or token is expired\n  if (remainingMinutes > 5 || remainingMinutes <= 0) {\n    hasShownWarning = false;\n  }\n};\n\n// Function to handle token expiration\nconst handleTokenExpiration = () => {\n  if (!isRedirecting) {\n    isRedirecting = true;\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n};\n\n// Request interceptor\naxiosInstance.interceptors.request.use(config => {\n  if (isTokenExpired()) {\n    handleTokenExpiration();\n    return Promise.reject(new Error('Token expired'));\n  }\n  checkTokenWarning(); // Check for warnings before each request\n\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor\naxiosInstance.interceptors.response.use(response => response, error => {\n  var _error$response, _error$response2;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 || ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 403) {\n    handleTokenExpiration();\n    return Promise.reject(new Error('Session expired'));\n  }\n  return Promise.reject(error);\n});\n\n// Set up interval to check token expiration and warnings\nsetInterval(() => {\n  if (isTokenExpired()) {\n    handleTokenExpiration();\n  } else {\n    checkTokenWarning();\n  }\n}, 30000); // Check every 30 seconds\n\nexport default axiosInstance;","map":{"version":3,"names":["axios","jwtDecode","axiosInstance","create","baseURL","timeout","isRedirecting","hasShownWarning","getTokenRemainingTime","token","localStorage","getItem","decoded","currentTime","Date","now","remainingSeconds","exp","Math","floor","isTokenExpired","checkTokenWarning","remainingMinutes","minutes","ceil","alert","handleTokenExpiration","removeItem","window","location","href","interceptors","request","use","config","Promise","reject","Error","headers","error","response","_error$response","_error$response2","status","setInterval"],"sources":["C:/Users/kajoe/Desktop/finance-trk/frontend/src/pages/axiosInstance.js"],"sourcesContent":["import axios from 'axios';\r\nimport { jwtDecode } from 'jwt-decode';\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: 'http://localhost:5000',\r\n  timeout: 10000,\r\n});\r\n\r\nlet isRedirecting = false;\r\nlet hasShownWarning = false;\r\n\r\n// Function to check remaining time in minutes\r\nconst getTokenRemainingTime = () => {\r\n  const token = localStorage.getItem('authToken');\r\n  if (!token) return 0;\r\n\r\n  try {\r\n    const decoded = jwtDecode(token);\r\n    const currentTime = Date.now() / 1000;\r\n    const remainingSeconds = decoded.exp - currentTime;\r\n    return Math.floor(remainingSeconds / 60); // Convert to minutes\r\n  } catch {\r\n    return 0;\r\n  }\r\n};\r\n\r\n// Function to check if token is expired\r\nconst isTokenExpired = () => {\r\n  return getTokenRemainingTime() <= 0;\r\n};\r\n\r\n// Function to handle token expiration warnings\r\nconst checkTokenWarning = () => {\r\n  const remainingMinutes = getTokenRemainingTime();\r\n  \r\n  // Show warning at 5 minutes if not already shown\r\n  if (remainingMinutes <= 5 && remainingMinutes > 0 && !hasShownWarning) {\r\n    hasShownWarning = true;\r\n    const minutes = Math.ceil(remainingMinutes);\r\n    alert(`⚠️ Your session will expire in ${minutes} minute${minutes > 1 ? 's' : ''}. Please save your work and login again to continue.`);\r\n  }\r\n  \r\n  // Reset warning flag when new token is present or token is expired\r\n  if (remainingMinutes > 5 || remainingMinutes <= 0) {\r\n    hasShownWarning = false;\r\n  }\r\n};\r\n\r\n// Function to handle token expiration\r\nconst handleTokenExpiration = () => {\r\n  if (!isRedirecting) {\r\n    isRedirecting = true;\r\n    localStorage.removeItem('authToken');\r\n    localStorage.removeItem('user');\r\n    window.location.href = '/login';\r\n  }\r\n};\r\n\r\n// Request interceptor\r\naxiosInstance.interceptors.request.use(\r\n  (config) => {\r\n    if (isTokenExpired()) {\r\n      handleTokenExpiration();\r\n      return Promise.reject(new Error('Token expired'));\r\n    }\r\n\r\n    checkTokenWarning(); // Check for warnings before each request\r\n\r\n    const token = localStorage.getItem('authToken');\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor\r\naxiosInstance.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401 || error.response?.status === 403) {\r\n      handleTokenExpiration();\r\n      return Promise.reject(new Error('Session expired'));\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Set up interval to check token expiration and warnings\r\nsetInterval(() => {\r\n  if (isTokenExpired()) {\r\n    handleTokenExpiration();\r\n  } else {\r\n    checkTokenWarning();\r\n  }\r\n}, 30000); // Check every 30 seconds\r\n\r\nexport default axiosInstance;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}